router-link 前端渲染
特殊属性 :to (: 绑定属性) 
{}内是对象的属性 " {name:}"
name: router定义的名称

eg: <router-link class="navbar-brand" :to="{name: 'home', params: {}}">  </router-link>

值的传递：
father -> son : props
son ->  father ：events

给组件传递属性：v-bind:user=""
简写成 :user=""
:user ,指的是value
双引号里的是key
可以自定义
return那里返回key：value
return {
	key: value,
}

 setup() {
        const user = reactive({
            Username: "Hownone Ho",
            LastName: "Ho",
            FirstName: "Hownone",
            Followers: 100,
            is_followed: false,

        });

        return {
            info : user, 
        }
    }


在子组件里引用属性要定义一个props
引用属性要用{{user.Username}}  {{}}表示取值

动态计算computed() 
里面传函数 computed(() => ...)

 props: {
        user: {
            type: Object,
            required: true,
        },
    },
    setup(props) {
        let FullName = computed(() => props.user.FirstName + ' ' + props.user.LastName);

        return {
            FullName
        }

    }

事件(events)绑定：v-on:click="follow" follow是函数名
<button @click="follow" v-if="!user.is_followed" type="button" class="btn btn-primary btn-sm">Follow</button>

 const follow = () => {
            console.log("follow");
        };

子组件触发事件 ： context.emit('checkfollow');
父组件响应 @checkfollow

reactive里面必须是对象
let里面不需要是对象

<textarea v-modal="content" class="form-control" id="EditPost" rows="3"></textarea>
v-modal作用 把content里的内容与textarea里的内容绑定起来

若要修改一个resp变量的值要对他的.value赋值

params后面可以跟我们想获取的变量名称  console.log(route.params.userID);

若想在外面调用actions里的某一个名字的话要用useStroe()里的dispatch("action里的函数名",其他参数)

headers: 验证
headers: {
                "Authorization": "Bearer " + store.state.user.access,
            }

$.ajax({}) type类型如下：
增： 创建 post
删： 删除 delete
改： 修改 put
查： 查找 get



